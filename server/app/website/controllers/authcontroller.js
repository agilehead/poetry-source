// Generated by CoffeeScript 1.6.2
(function() {
  var AppError, AuthController, OAuth, conf, controller, https, models, oa, utils, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  https = require('https');

  conf = require('../../conf');

  models = new (require('../../models')).Models(conf.db);

  controller = require('./controller');

  utils = require('../../common/utils');

  AppError = require('../../common/apperror').AppError;

  OAuth = require('oauth').OAuth;

  oa = new OAuth("https://api.twitter.com/oauth/request_token", "https://api.twitter.com/oauth/access_token", conf.auth.twitter.TWITTER_CONSUMER_KEY, conf.auth.twitter.TWITTER_SECRET, "1.0A", conf.auth.twitter.TWITTER_CALLBACK, "HMAC-SHA1");

  AuthController = (function(_super) {
    __extends(AuthController, _super);

    function AuthController() {
      this.parseTwitterUserDetails = __bind(this.parseTwitterUserDetails, this);
      this.twitterCallback = __bind(this.twitterCallback, this);
      this.twitter = __bind(this.twitter, this);      _ref = AuthController.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    AuthController.prototype.twitter = function(req, res, text) {
      var _this = this;

      return oa.getOAuthRequestToken(function(error, oauth_token, oauth_token_secret, results) {
        var oauth, oauthProcessKey, token;

        if (error) {
          console.log(error);
          return res.send("Error in authenticating");
        } else {
          oauthProcessKey = utils.uniqueId(24);
          oauth = {
            token: oauth_token,
            token_secret: oauth_token_secret
          };
          token = new models.Token({
            type: 'oauth-process-key',
            key: oauthProcessKey,
            value: oauth
          });
          return token.save({
            user: req.user
          }, function(err, token) {
            if (!err) {
              res.cookie('oauth_process_key', oauthProcessKey);
              return res.send("                            <html>                                <script type=\"text/javascript\">                                    window.location.href = \"https://twitter.com/oauth/authenticate?oauth_token=" + oauth_token + "\";                                </script>                                <body></body>                            </html>");
            } else {
              return next(err);
            }
          });
        }
      });
    };

    AuthController.prototype.twitterCallback = function(req, res, next) {
      var _this = this;

      return models.Token.get({
        type: 'oauth-process-key',
        key: req.cookies.oauth_process_key
      }, {}, function(err, token) {
        var oauth;

        if (!err) {
          if (token) {
            oauth = token.value;
            oauth.verifier = req.query.oauth_verifier;
            return oa.getOAuthAccessToken(oauth.token, oauth.token_secret, oauth.verifier, function(error, accessToken, accessTokenSecret, results) {
              if (error) {
                console.log(error);
                return res.send("Could not connect to Twitter.");
              } else {
                console.log("Twitter: authenticated " + results.screen_name);
                return oa.get("https://api.twitter.com/1.1/users/lookup.json?screen_name=" + results.screen_name, accessToken, accessTokenSecret, function(e, data, _res) {
                  var userDetails;

                  data = JSON.parse(data);
                  if (data.length && (data[0] != null)) {
                    userDetails = _this.parseTwitterUserDetails(data[0]);
                    return models.User.getOrCreateUser(userDetails, 'tw', accessToken, function(err, _user, _session) {
                      res.clearCookie("oauth_process_key");
                      res.cookie("userid", _user._id.toString());
                      res.cookie("domain", "tw");
                      res.cookie("username", _user.username);
                      res.cookie("fullName", _user.name);
                      res.cookie("passkey", _session.passkey);
                      return res.send('\
                                                <html>\
                                                    <script type="text/javascript">\
                                                        window.location.href = "/";\
                                                    </script>\
                                                    <body></body>\
                                                </html>');
                    });
                  } else {
                    console.log(JSON.stringify(data));
                    return res.send("Invalid response.");
                  }
                });
              }
            });
          } else {
            console.log("No token");
            return res.send("Could not connect to Twitter.");
          }
        } else {
          return next(err);
        }
      });
    };

    AuthController.prototype.parseTwitterUserDetails = function(userDetails) {
      var _ref1, _ref2, _ref3;

      return {
        domainid: (_ref1 = userDetails.id) != null ? _ref1 : '',
        username: userDetails.screen_name,
        name: (_ref2 = userDetails.name) != null ? _ref2 : userDetails.screen_name,
        location: (_ref3 = userDetails.location) != null ? _ref3 : '',
        email: "twitteruser@poe3.com",
        picture: userDetails.profile_image_url,
        thumbnail: userDetails.profile_image_url
      };
    };

    return AuthController;

  })(controller.Controller);

  exports.AuthController = AuthController;

}).call(this);
